{"mappings":"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","sources":["src/SearchParams.tsx","src/Results.tsx","src/Pet.tsx","src/useBreedList.tsx","src/actionCreators/changeLocation.js","src/actionCreators/changeAnimal.js","src/actionCreators/changeBreed.js","src/actionCreators/changeTheme.js"],"sourcesContent":["import React, { useState, useEffect, FunctionComponent } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Results from \"./Results\";\r\nimport useBreedList from \"./useBreedList\";\r\n\r\nimport changeLocation from './actionCreators/changeLocation';\r\nimport changeAnimal from './actionCreators/changeAnimal';\r\nimport changeBreed from './actionCreators/changeBreed';\r\nimport changeTheme from './actionCreators/changeTheme';\r\n\r\nimport { PetAPIResponse, Pet as IPet, Animal } from \"./APIResponseTypes\";\r\nimport store from \"./store\";\r\n\r\nconst ANIMALS: Animal[] = [\"bird\", \"cat\", \"dog\", \"rabbit\", \"reptile\"];\r\n\r\nconst SearchParams: FunctionComponent = () => {\r\n  // const [location, setLocation] = useState(\"\");\r\n  // const [animal, setAnimal] = useState(\"\" as Animal);\r\n  // const [breed, setBreed] = useState(\"\");\r\n\r\n  /*\r\n  useSelector()â€‹ allows you to extract data from the Redux store state, using a selector function. \r\n  */ \r\n  const animal = useSelector((state) => state.animal);\r\n  const location = useSelector((state) => state.location);\r\n  const theme = useSelector((state) => state.theme);\r\n  const breed = useSelector((state) => state.breed);\r\n\r\n  /**\r\nThis hook returns a reference to the dispatch function from the Redux store. You may use it to dispatch actions as needed.\r\n   */\r\n  const dispatch = useDispatch();\r\n\r\n  // pets will hold an array with all the pets comming from API.\r\n  const [pets, setPets] = useState([] as IPet[]);\r\n  // useBreedList is a custom hook.\r\n  const [breeds] = useBreedList(animal as Animal);\r\n\r\n  useEffect(() => {\r\n    void requestPets();\r\n  }, []);\r\n\r\n  // async function to get data from API endpoint\r\n  async function requestPets() {\r\n    // response of the fetch request\r\n    const response: Response = await fetch(\r\n      `http://pets-v2.dev-apis.com/pets?animal=${animal}&location=${location}&breed=${breed}`\r\n    );\r\n    // takes a response and parsing the body text as JSON\r\n    const json = (await response.json()) as PetAPIResponse;\r\n    // console.log(json.pets);\r\n    setPets(json.pets);\r\n  }\r\n\r\n  function handleAnimalChange(e){\r\n    dispatch(changeBreed(\"\"));\r\n    dispatch(changeAnimal(e.target.value));\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-params my-0 mx-auto px-0 w-11/12\">\r\n      <form\r\n        className=\"search-params p-10 mb-10 rounded-lg bg-gray-200 shadow-lg flex flex-col justify-center items-center divide-y divide-gray-900\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          void requestPets();\r\n        }}\r\n      >\r\n        <label htmlFor=\"location\" className=\"search-label\">\r\n          Location\r\n          <input\r\n            className=\"search-control block\"\r\n            id=\"location\"\r\n            onChange={(e) => dispatch(changeLocation(e.target.value))}\r\n            value={location}\r\n            placeholder=\"Location\"\r\n          />\r\n        </label>\r\n        <label htmlFor=\"animal\" className=\"search-label\">\r\n          Animal\r\n          <select\r\n            className=\"search-control block\"\r\n            id=\"animal\"\r\n            value={animal}\r\n            onChange={handleAnimalChange}\r\n            onBlur={handleAnimalChange}\r\n          >\r\n            <option />\r\n            {ANIMALS.map((animal) => (\r\n              <option key={animal} value={animal}>\r\n                {animal}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"breed\" className=\"search-label\">\r\n          breed\r\n          <select\r\n            className=\"search-control disabled:opacity-50 block\"\r\n            disabled={!breeds.length}\r\n            id=\"breed\"\r\n            value={breed}\r\n            onChange={(e) => dispatch(changeBreed(e.target.value))}\r\n            onBlur={(e) => dispatch(changeBreed(e.target.value))}\r\n          >\r\n            {breeds.map((breed) => (\r\n              <option key={breed} value={breed}>\r\n                {breed}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"theme\" className=\"search-label\">\r\n          Theme\r\n          <select\r\n            className=\"search-control block\"\r\n            value={theme}\r\n            onChange={(e) => dispatch(changeTheme(e.target.value))}\r\n            onBlur={(e) => dispatch(changeTheme(e.target.value))}\r\n          >\r\n            <option value=\"peru\">Peru</option>\r\n            <option value=\"darkblue\">Dark Blue</option>\r\n            <option value=\"chartreuse\">Chartreuse</option>\r\n            <option value=\"mediumorchid\">Medium orchid</option>\r\n          </select>\r\n        </label>\r\n        <button\r\n          style={{ backgroundColor: theme }}\r\n          className=\"search-control rounded px-6 py-2 text-white hover:opacity-50 border-none\"\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <Results pets={pets} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchParams;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport Pet from \"./Pet\";\r\nimport {Pet as IPet} from './APIResponseTypes';\r\n\r\nconst Results: FunctionComponent<{pets: IPet[]}> = ({pets})=>{\r\n  // destructuring props to extract a key\r\n  //   console.log(pets);\r\n  return (\r\n    <div className=\"search grid gap-4 grid-cols-1 lg:grid-cols-3 sm:grid-cols-2\">\r\n      {!pets.length ? (\r\n        <h2>No pets found</h2>\r\n      ) : (\r\n        pets.map((pet) => (\r\n          <Pet\r\n            name={pet.name}\r\n            animal={pet.animal}\r\n            breed={pet.breed}\r\n            key={pet.id}\r\n            images={pet.images}\r\n            location={`${pet.city}, ${pet.state}`}\r\n            description={pet.description}\r\n            id={pet.id}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n\tid: number;\r\n\tname: string;\r\n\tanimal: \"dog\" | \"cat\" | \"bird\" | \"reptile\" | \"rabbit\";\r\n\tdescription: string;\r\n\tbreed: string;\r\n\timages: string[];\r\n  location: string;\r\n}\r\n// passing props for this component.\r\nconst Pet: FunctionComponent<IProps> = (props: IProps) => {\r\n  const { name, animal, breed, images, location, id } = props;\r\n  let hero = \"http://pets-images.dev-apis.com/pets/none.jpg\";\r\n  if (images && images.length) {\r\n    hero = images[0];\r\n  }\r\n  return (\r\n    <Link to={`/details/${id}`} className=\"pet relative block\">\r\n      <div className=\"image-container\">\r\n        <img data-testid=\"thumbnail\" src={hero} alt={name} />\r\n      </div>\r\n      <div className=\"info absolute w-full bottom-0 left-0 bg-gradient-to-tr from-white to-transparent px-2 py-2\">\r\n        <h1>{name}</h1>\r\n        <h2>{`${animal} - ${breed} - ${location}`}</h2>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Pet;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Animal, BreedListAPIResponse } from \"./APIResponseTypes\";\r\n// to store breed locally.\r\nconst localCache:{\r\n  [index: string]: string[];\r\n} = {};\r\n\r\ntype Status = \"unloaded\" | \"loading\" | \"loaded\";\r\n\r\n// passing down animal props to our custom hook\r\n// our custom hook will use other built-in hooks\r\nfunction useBreedList(animal: Animal): [string[], Status] {\r\n  const [breedList, setBreedList] = useState([] as string[]);\r\n  const [status, setStatus] = useState(\"unloaded\" as Status);\r\n  useEffect(() => {\r\n    if (!animal) {\r\n      // when there is no animal\r\n      setBreedList([]); // empty breedlist\r\n    } else if (localCache[animal]) {\r\n      // if animal is in cache\r\n      // load from there.\r\n      setBreedList(localCache[animal]);\r\n    } else {\r\n      // making a quest to an API to fetch fresh breedlist.\r\n      void requestBreedList();\r\n    }\r\n    // async function to fetch data from API\r\n    async function requestBreedList() {\r\n      setBreedList([]); // emptying breedList\r\n      setStatus(\"loading\" as Status); // status is loading.\r\n      const res: Response = await fetch(\r\n        `http://pets-v2.dev-apis.com/breeds?animal=${animal}`\r\n      );\r\n      const json = await res.json() as BreedListAPIResponse;\r\n      localCache[animal] = json.breeds || [];\r\n      setBreedList(localCache[animal]);\r\n      setStatus(\"loaded\" as Status);\r\n    }\r\n  }, [animal]); // animal is a prop, based on which the effect will run.\r\n  // custom hook will return the following array\r\n  return [breedList, status];\r\n}\r\n\r\nexport default useBreedList;\r\n","/**\r\n action creators are functions, that take a parameter and returns correct shape of action object with proper data.\r\n */\r\nexport default function changeLocation(location) {\r\n  return { type: \"CHANGE_LOCATION\", payload: location };\r\n}\r\n","/**\r\n action creators are functions, that take a parameter and returns correct shape of action object with proper data.\r\n*/\r\nexport default function changeAnimal(animal) {\r\n  return { type: \"CHANGE_ANIMAL\", payload: animal };\r\n}\r\n","/**\r\n action creators are functions, that take a parameter and returns correct shape of action object with proper data.\r\n */\r\nexport default function changeBreed(breed) {\r\n  return { type: \"CHANGE_BREED\", payload: breed };\r\n}\r\n","/**\r\n action creators are functions, that take a parameter and returns correct shape of action object with proper data.\r\n */\r\nexport default function changeTheme(theme) {\r\n  return { type: \"CHANGE_THEME\", payload: theme };\r\n}\r\n"],"names":["$fCCkY","parcelRequire","ANIMALS","handleAnimalChange","e","dispatch","changeBreed","changeAnimal","target","value","animal1","$4pMGZ","useSelector","state","location","theme","breed","breed1","requestPets","useDispatch","ref","$bdruz","default","$lkDnA","useState","pets","setPets","breeds","$04xiL","json","this","arguments","$parcel$interopDefault","$eEkU8","animal","_ctx","response","concat","sent","stop","_callee","$9m374","jsxs","changeLocation","id","onChange","$9GlEk","className","jsx","map","children","$49SB7","changeTheme","$l6KMi","backgroundColor","$bdOKC","$80596d72e43cbd04$export$2e2bcd8739ae039","param","length","pet","$1euAN","name","images","city","description","$3b99e793ab6c3b28$export$2e2bcd8739ae039","props","hero","$9MP5L","Link","to","src","alt","localCache","$9e258eef68f22598$export$2e2bcd8739ae039","breedList","setBreedList","status","setStatus","useEffect","requestBreedList","mark","res","fetch","apply","$70c8d47461450e63$export$2e2bcd8739ae039","type","payload","$a45be492a384c31e$export$2e2bcd8739ae039","$30725aa1e877db0b$export$2e2bcd8739ae039","$f5de719e5bfe8757$export$2e2bcd8739ae039"],"version":3,"file":"SearchParams.fa42c08c.js.map"}