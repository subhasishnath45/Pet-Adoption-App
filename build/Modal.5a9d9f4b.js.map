{"mappings":"waAAA,IAAAA,EAAAC,EAAA,S,0BAGMC,EAAYC,SAASC,eAAe,S,EAET,SAAAC,G,IAAGC,aAG5BC,GAAiDC,YAAO,MAgC/D,OA9BMD,EAAME,UAGTF,EAAME,QAAUN,SAASO,cAAc,SAEzCC,gBAAU,WAER,GAAIT,GAAcK,EAAME,QAMxB,OAFAP,EAAUU,YAAYL,EAAME,SAErB,WACFF,EAAME,SACPP,EAAUW,YAAYN,EAAME,YAG/B,KAYJ,EAAAK,EAAAC,eAAA,EAAAf,EAAAgB,KAAA,OAEDC,UAAA,uI","sources":["src/Modal.tsx"],"sourcesContent":["import React, { useEffect, useRef, FunctionComponent, MutableRefObject } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n// the div with modal id in index.html file.\r\nconst modalRoot = document.getElementById(\"modal\");\r\n\r\nconst Modal: FunctionComponent = ({ children }) => {\r\n\r\n  // The useRef Hook allows you to persist values between renders.\r\n  const elRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\r\n  // if current doesn't have a value\r\n  if (!elRef.current) {\r\n    // storing a newly created div to current property.\r\n    // the div will persist after re-render\r\n    elRef.current = document.createElement(\"div\");\r\n  }\r\n  useEffect(() => {\r\n    // if both are null\r\n    if(!modalRoot || !elRef.current){\r\n      return; // exit\r\n    }\r\n    // Appending the modal element inside modalRoot.\r\n    modalRoot.appendChild(elRef.current);\r\n    // clearning up the modal element from modalRoot after modal is displayed and unrendering the modal.\r\n    return () => {\r\n      if(elRef.current){\r\n        modalRoot.removeChild(elRef.current);\r\n      }\r\n    }\r\n  }, []);\r\n  /**\r\n   * The first argument of createPortal is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.\r\n   *\r\n   * Down at the bottom we use React's createPortal to pass the children (whatever you put inside <Modal></Modal>) to the portal div\r\n   */\r\n  return createPortal(\r\n    <div className=\"modal-wrapper fixed h-screen w-screen flex justify-center items-center bg-gradient-to-tr from-purple-500 to-pink-500 overflow-hidden\">\r\n      {children}\r\n    </div>,\r\n    elRef.current\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n"],"names":["$9m374","parcelRequire","modalRoot","document","getElementById","param","children","elRef","useRef","current","createElement","useEffect","appendChild","removeChild","$hfcrI","createPortal","jsx","className"],"version":3,"file":"Modal.5a9d9f4b.js.map"}