{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,IAAII,+BAAJ,AAAA;AAEA,MAAMC,2BAAK,GAAG,CAAC,YAAEC,QAAAA,CAAAA,EAAH,GAAkB;IAC9B,yCAAA;IACA,oCAAA;IACAF,+BAAS,GAAGA,+BAAS,GAAGA,+BAAH,GAAeG,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAApC,CAH8B,CAK9B,gEAFAJ;IAGA,MAAMK,KAAK,GAAGP,CAAAA,GAAAA,mBAAM,CAAA,CAAC,IAAD,CAApB,AAN8B,EAO9B,kCADA;IAEA,IAAI,CAACO,KAAK,CAACC,OAAX,EACE,mDAAA;IACA,uCAAA;IACAD,KAAK,CAACC,OAAN,GAAgBH,QAAQ,CAACI,aAAT,CAAuB,KAAvB,CAAhB,CAAAF;IAEFR,CAAAA,GAAAA,sBAAS,CAAA,CAAC,IAAM;QACd,gDAAA;QACAG,+BAAS,CAACQ,WAAV,CAAsBH,KAAK,CAACC,OAA5B,CAAA,CAFc,CAGd,oGADAN;QAEA,OAAO,IAAMA,+BAAS,CAACS,WAAV,CAAsBJ,KAAK,CAACC,OAA5B,CAAb,CAAA;KAJO,EAKN,EALM,CAAT,CAKC;IACD,yTAIF,CACE,OAAA,aAAOP,CAAAA,CAAAA,GAAAA,0DAAY,CAAA,CAAA,aACjB,CAAA,CAAA,GAAA,0DADF,CAAA,CAAA,KAAA,EAAA;QACO,SAAS,EAAC,sIAAf;QAAA,QAAA,EACGG,QADH;KAAA,CADiB,EAIjBG,KAAK,CAACC,OAJW,CAAnB,CACE;CAzBJ,AA8BC;IAED,wCAAA,GAAeL,2BAAf","sources":["src/Modal.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n// the div with modal id in index.html file.\r\nlet modalRoot;\r\n\r\nconst Modal = ({ children }) => {\r\n  // if modalroot exists, then keep it same\r\n  // otherwise, fetch it from the DOM.\r\n  modalRoot = modalRoot ? modalRoot : document.getElementById(\"modal\");\r\n\r\n  // The useRef Hook allows you to persist values between renders.\r\n  const elRef = useRef(null);\r\n  // if current doesn't have a value\r\n  if (!elRef.current) {\r\n    // storing a newly created div to current property.\r\n    // the div will persist after re-render\r\n    elRef.current = document.createElement(\"div\");\r\n  }\r\n  useEffect(() => {\r\n    // Appending the modal element inside modalRoot.\r\n    modalRoot.appendChild(elRef.current);\r\n    // clearning up the modal element from modalRoot after modal is displayed and unrendering the modal.\r\n    return () => modalRoot.removeChild(elRef.current);\r\n  }, []);\r\n  /**\r\n   * The first argument of createPortal is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.\r\n   *\r\n   * Down at the bottom we use React's createPortal to pass the children (whatever you put inside <Modal></Modal>) to the portal div\r\n   */\r\n  return createPortal(\r\n    <div className=\"modal-wrapper fixed h-screen w-screen flex justify-center items-center bg-gradient-to-tr from-purple-500 to-pink-500 overflow-hidden\">\r\n      {children}\r\n    </div>,\r\n    elRef.current\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n"],"names":["React","useEffect","useRef","createPortal","modalRoot","Modal","children","document","getElementById","elRef","current","createElement","appendChild","removeChild"],"version":3,"file":"Modal.b35764a5.js.map","sourceRoot":"../../"}